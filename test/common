#!/bin/bash

declare -A COLOR
COLOR['END']='\033[0m'
COLOR['RED']='\033[0;91m'
COLOR['GREEN']='\033[0;92m'
COLOR['YELLOW']='\033[0;93m'
COLOR['BLUE']='\033[0;94m'
COLOR['WHITE']='\033[0;37m'
COLOR['NC']='\033[0m'
COLOR['CYAN']='\033[0;96m'

readonly SKIP_EXIT_CODE=200

printc() {
    local color="$1"
    shift
    echo -e "${COLOR[$color]}$@${COLOR['END']}"
}

check_root(){
	if [ $USER != "root" ]; then
		printc "RED" "Please run as root"
    		exit 1
	fi
}

check_output(){
	printc "WHITE" "Command output:\n${APP_STDOUT}"
	for regex in "${app_regex[@]}"; do
		if echo "${APP_STDOUT}" | grep -q -P "$regex"; then
			printc "BLUE" "[OK] Pattern '$regex' matched"
			continue
		fi
		printc "YELLOW" "Output doesn't match: $regex"
		return -1
	done
}

skip_test(){
	printc "YELLOW" "[WARN] Test being skipped"
	exit $SKIP_EXIT_CODE
}

test_init(){
	app="${1#rt-}"
	printc "BLUE" "\nTesting: " $app
}

test_failed() {
	printc "RED" "FAIL"
	exit 1
}

nonzero_fail() {
	printc "RED" "FAIL - Application returned nonzero status"
	printc "YELLOW" "[INFO] Command output:\n${APP_STDOUT}"
	printc "RED" "[WARN] stderr:\n${APP_STDERR}"
	exit 1
}

partial_success(){
	printc "YELLOW" "[WARN] stderr:"
	printc "YELLOW" ${APP_STDERR}
	printc "NC" "[INFO] Command executed successfully"
}

app_exit_check(){
	[$1 -ne 0] && nonzero_fail
	partial_success
}

test_success() {
	printc "GREEN" "PASS"
	exit 0
}

# Execute the command while `Catch`ing the stdout to APP_STDOUT variable
# and stderr to APP_STDERR variable while preserving the exit code and
# using `tr` to sanitize the streams
# Usage: catch COMMAND [ARG1[ ARG2[ ...[ ARGN]]]]
catch() {
    {
        IFS=$'\n' read -r -d '' APP_STDOUT;
        IFS=$'\n' read -r -d '' APP_STDERR;
        (IFS=$'\n' read -r -d '' _ERRNO_; return ${_ERRNO_});
    } < <((printf '\0%s\0%d\0' "$(((({ "${@}"; echo "${?}" 1>&3-; } | tr -d '\0' 1>&4-) 4>&2- 2>&1- | tr -d '\0' 1>&4-) 3>&1- | exit "$(cat)") 4>&1-)" "${?}" 1>&2) 2>&1)

}
